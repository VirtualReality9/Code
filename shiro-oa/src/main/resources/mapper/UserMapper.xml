<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unexpect.mapper.UserMapper">

    <resultMap type="User" id="ROLE_PERMISSION_MAP">
        <id column="userId" property="userId"/>
        <result property="userPhone" column="userPhone" />
        <result property="userPassword" column="userPassword" />
        <result property="salt" column="salt" />
        <result property="userName" column="userName" />
        <!--<result property="remark" column="remark" />-->
        <collection property="roles" ofType="Role">
            <id column="roleId" property="roleId"/>
            <result column="roleName" property="roleName"/>
            <result column="roleLevel" property="roleLevel"/>
        </collection>
        <collection property="permissions" ofType="Permission">
            <id column="permissionId" property="permissionId"/>
            <result column="keyword" property="keyword"/>
            <result column="permissionName" property="permissionName"/>
            <result column="permissionUrl" property="permissionUrl"/>
        </collection>


        <!-- collection:配置一对多关系
             property:ROLE下的permissions属性
             ofType:property的数据类型，支持别名
        -->

        <!--<collection property="navigationBars" ofType="navigationBar">-->
        <!--    <id property="nbid" column="nbid" />-->
        <!--    <result property="nbcode" column="nbcode" />-->
        <!--    <result property="navname" column="navname" />-->
        <!--    <result property="path" column="path" />-->
        <!--    <result property="hidden" column="hidden" />-->
        <!--    <result property="fatherNode" column="fatherNode" />-->
        <!--    <result property="icon" column="icon" />-->
        <!--    <result property="component" column="component" />-->
        <!--    <result property="orders" column="orders" />-->
        <!--    <result property="remark" column="remark" />-->
        <!--</collection>-->

        <!--<collection property="users" ofType="User">-->
        <!--    <id property="id" column="id" />-->
        <!--    <result property="userCode" column="userCode" />-->
        <!--    <result property="password" column="password" />-->
        <!--    <result property="userName" column="name" />-->
        <!--    <result property="sex" column="sex" />-->
        <!--    <result property="status" column="status" />-->
        <!--    <result property="createtime" column="u_createtime" />-->
        <!--    <result property="updatetime" column="u_updatetime" />-->
        <!--    <result property="remark" column="remark" />-->
        <!--</collection>-->

    </resultMap>
    <!--<select id="queryUserByName" resultMap="ROLE_PERMISSION_MAP" parameterType= "String">-->
    <!--select u.id , u.userName ,u.userCode , u.sex , u.PASSWORD , ur.user_id userId , r.roleId , r.rname , r.remark , p.pid , p.pName from `user` u-->
    <!--        left join t_user_role ur on u.id = ur.user_id-->
    <!--        left join role r on r.roleId = ur.role_id-->
	<!--		left join t_role_permission rp on r.roleId = rp.permission_id-->
	<!--		left join t_permission p on p.pid = rp.permission_id-->
    <!--        where-->
	<!--		userName = #{Name}-->
    <!--        order by 1-->

    <!--</select>-->
    <select id="queryUserByName" resultMap="ROLE_PERMISSION_MAP" parameterType= "String">
    select distinct userId,userPhone,userName,userPassword,salt,role.roleId,roleName,roleLevel,permission.permissionId,permissionName,keyword,permissionUrl
    from user,permission,role,user_role,role_permission
    where permission.permissionId in(
    select permissionId from role_permission where roleId in(
    select roleIdOne from user_role where userIdTwo =(
    select userId from user where userPhone = #{userPhone})))and userId =(
    select userId from user where userPhone = #{userPhone}) and userIdTwo = userId and role.roleId = user_role.roleIdOne;
    </select>
    <select id="queryUserByUserName" resultType="User" parameterType= "String">
        select * from user where userName = #{userName}
    </select>
    <select id="queryUserById" resultType="User" parameterType="Integer">
        select * from user where userId = #{id};
    </select>

    <!--<select id="queryUserByName" parameterType="String" resultType="User">-->
    <!--    select  * from mydb.user where userName = #{name};-->
    <!--</select>-->
    <!--<resultMap id="userResult" type="Role">-->
    <!--    <id column="id"></id>-->
    <!--    <result column="roleId" property="roleId" ></result>-->
    <!--    <result column="roleCode" property="name"></result>-->
    <!--    <result column="rname" property="rname"></result>-->
    <!--    <result column="createtime" property="createtime"></result>-->
    <!--    <result column="updatetime" property="updatetime"></result>-->
    <!--    &lt;!&ndash;<result column="en_name" property="enName"></result>&ndash;&gt;-->
    <!--    &lt;!&ndash;<collection property="children" ofType="MenuDO" column="{id=id,userId=userId}" select="menus"></collection>&ndash;&gt;-->
    <!--</resultMap>-->
    <!--查询User,Role,Employee-->
    <resultMap type="User" id="USER_ROLE_NAVIGATION_MAP">
        <id column="userId" property="userId"/>
        <result property="userPhone" column="userPhone" />
        <result property="userName" column="userName" />
        <result property="userPassword" column="userPassword" />
        <result property="profilePhoto" column="profilePhoto" />
        <association property="employee" javaType="Employee">
            <id property="employeeId" column="employeeId" />
            <result property="employeeName" column="employeeName" />
            <result property="departmentId" column="departmentId" />
        </association>
        <collection property="roles" ofType="Role">
            <id column="roleId" property="roleId"/>
            <result column="roleName" property="roleName"/>
            <result column="roleLevel" property="roleLevel"/>
        </collection>
        <collection property="navigationBars" ofType="NavigationBar">
            <id column="T1" property="nbid"/>
            <result column="N1" property="navname"/>
            <result column="O1" property="order" />
            <result column="P1" property="path" />
            <collection property="childList" ofType="NavigationBar">
                <id column="T2" property="nbid"/>
                <result column="N2" property="navname"/>
                <result column="O2" property="order" />
                <result column="Node" property="fatherNode"/>
                <result column="P2" property="path" />
            </collection>
        </collection>
    </resultMap>
    <select id="queryNavigationBars" parameterType="String" resultMap="USER_ROLE_NAVIGATION_MAP">
            select u.userId,u.userPhone,u.userName,u.userPassword,u.profilePhoto,r.roleId,roleName,roleLevel,e.employeeId,e.employeeName,e.departmentId,TT.T1, TT.T2,TT.Node,TT.N1,TT.N2,TT.O1,TT.O2,TT.P1,TT.P2
                from (
                select m1.nbid T1, m2.nbid T2,m2.fatherNode Node,m1.navname N1,m2.navname N2,m1.order O1,m2.order O2,m1.path P1,m2.path P2
                    from navigationbar2 m1
                    left join navigationbar2 m2 on m1.nbid = m2.fatherNode
                where m1.level = '1' )
            TT , role_navigationbar2 rel
            left join role r on r.roleId = rel.roleId
            left join user_role ur on ur.roleIdOne = r.roleId
            left join user u on u.userId = ur.userIdTwo
            left join user_employee ue on u.userId = ue.userIdOne
            left join employee e on ue.employeeIdOne = e.employeeId
            where TT.T2 = rel.nbid and u.userPhone = #{mobile}
            group by TT.T1, TT.T2
            order by TT.T1, TT.O2
        </select>
    <select id="queryManagerNavigationBars" parameterType="Integer" resultMap="USER_ROLE_NAVIGATION_MAP">
        select u.userId,u.userPhone,u.userName,u.userPassword,TT.T1, TT.T2,TT.Node,TT.N1,TT.N2,TT.O1,TT.O2,TT.P1
                from (
                select m1.nbid T1, m2.nbid T2,m2.fatherNode Node,m1.navname N1,m2.navname N2,m1.order O1,m2.order O2,m1.path P1
                    from navigationbar m1
                    left join navigationbar m2 on m1.nbid = m2.fatherNode
                where m1.level = '1' )
            TT , role_navigationbar_manager rel
            left join role r on r.roleId = rel.roleId
            left join user_role ur on ur.roleIdOne = r.roleId
            left join user u on u.userId = ur.userIdTwo
            where TT.T2 = rel.nbid and u.userId = #{userId}
            group by TT.T1, TT.T2
            order by TT.T1, TT.O2
    </select>
    <!--left join user_employee ue on u.userId = ue.userIdOne-->
    <!--left join employee e on ue.employeeIdOne = e.employeeId-->
    <select id="getAll" resultMap="USER_ROLE_NAVIGATION_MAP">
            select u.userId,u.userPhone,u.userPassword,e.employeeId,e.employeeName,TT.T1, TT.T2,TT.Node,TT.N1,TT.N2
                from (
                select m1.nbid T1, m2.nbid T2,m2.fatherNode Node,m1.navname N1,m2.navname N2
                    from navigationbar m1
                    left join navigationbar m2 on m1.nbid = m2.fatherNode
                where m1.level = '1' )
            TT , role_navigationbar rel
            left join role r on r.roleId = rel.roleId
            left join user_role ur on ur.roleIdOne = r.roleId
            left join user u on u.userId = ur.userIdTwo
            left join user_employee ue on u.userId = ue.userIdOne
            left join employee e on ue.employeeIdOne = e.employeeId
            where TT.T2 = rel.nbid
            group by TT.T1, TT.T2
    </select>
    <update id="updateUserPhone" parameterType="Map">
        update user
        <trim prefix="set" suffixOverrides=",">
            <if test="userPhone != null">
                userPhone = #{userPhone}
            </if>
        </trim>
        where userName = #{employeeName}
    </update>

    <select id="queryUserByMobile" resultType="User" parameterType="String">
        select * from user where userPhone = #{mobile}
    </select>

    <insert id="userAddRole" parameterType="Map">
        insert into user_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <!--            <if test="roleId != null">-->
            <!--                roleId,-->
            <!--            </if>-->
            <if test="roleIdOne != null">
                roleIdOne,
            </if>
            <if test="userIdTwo != null">
                userIdTwo,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <!--            <if test="roleId != null">-->
            <!--                #{roleId},-->
            <!--            </if>-->
            <if test="roleIdOne != null">
                #{roleIdOne},
            </if>
            <if test="userIdTwo != null">
                #{userIdTwo},
            </if>
        </trim>
    </insert>
    <update id="updateUserRole" parameterType="Map">
        update user_role
        <trim prefix="set" suffixOverrides=",">
            <if test="roleIdOne != null">
                roleIdOne = #{roleIdOne}
            </if>
        </trim>
        where userIdTwo = #{userIdTwo}
    </update>
    <delete id="deleteUserRole" parameterType="Integer">
        delete from user_role where userIdTwo = #{id};
    </delete>

    <!--添加用户-->
    <insert id="addUser" parameterType="Map" keyProperty="userId" useGeneratedKeys="true">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
                userPhone,
            <if test="userPassword != null">
                userPassword,
            </if>
            <if test="salt != null">
                salt,
            </if>
            <if test="userName != null">
                userName,
            </if>
            <if test="userCreateTime != null">
                userCreateTime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                #{userPhone},
            <if test="userPassword != null">
                #{userPassword},
            </if>
            <if test="salt != null">
                #{salt},
            </if>
            <if test="userName != null">
                #{userName},
            </if>
            <if test="userCreateTime != null">
                #{userCreateTime},
            </if>
        </trim>
    </insert>
    <!--动态修改-->
    <update id="updateUser" parameterType="map">
        update user
        <trim prefix="SET" suffixOverrides=",">
            <if test="userPhone != null">
                userPhone = #{userPhone},
            </if>
            <if test="userName != null">
                userName = #{userName},
            </if>
            <if test="contact != null">
                contact = #{contact},
            </if>
            <if test="userPassword != null">
                <if test="salt != null">
                    salt = #{salt},
                </if>
                userPassword = #{userPassword},
            </if>
            <if test="proofImage != null">
                profilePhoto = #{proofImage},
            </if>
            <if test="userAddress != null">
                userAddress = #{userAddress},
            </if>
        </trim>
        where userId = #{userId}
    </update>
</mapper>